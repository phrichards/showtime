{"version":3,"sources":["ShowForm.jsx","Show.jsx","Shows.jsx","App.js","serviceWorker.js","index.js"],"names":["ShowForm","props","handleAddArtistClick","setState","prevState","artistInputs","TextField","placeholder","name","onChange","handleArtistChange","handleVenueChange","e","venue","target","value","index","newArtists","state","artists","map","artist","artistIndex","handleDateChange","date","handleCheckboxClick","event","checked","handleFormSubmit","a","preventDefault","showData","seen","seenChecked","ticket","ticketChecked","url","method","type","_id","fetch","headers","body","JSON","stringify","response","json","newShow","toggleEditForm","updateShow","addNewShow","console","error","deleteShow","window","confirm","this","artistInputArray","onSubmit","className","Button","onClick","utils","DateFnsUtils","DateTimePicker","FormControlLabel","control","Checkbox","label","variant","color","Component","Show","log","saveEditForm","showArtistInput","showSaveButton","data","Card","style","maxWidth","CardContent","Typography","component","Shows","shows","show","key","id","App","prevShows","nextShows","newState","nextState","Object","assign","find","filter","result","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74ebd132.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    DateTimePicker,\n    MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\n\nimport {\n    TextField,\n    Button,\n    Checkbox,\n    FormControlLabel\n} from '@material-ui/core'\n\nclass ShowForm extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            date: null,\n            venue: null,\n            artists: [],\n            artistInputs: [],\n            ticketChecked: false,\n            seenChecked: false,\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.showData) {\n            const artistInputArray = this.props.showData.artists.map(artist => <TextField value={artist} onChange={this.handleArtistChange} name={artist} />)\n            this.setState({\n                artistInputs: artistInputArray,\n                artists: this.props.showData.artists,\n                ticketChecked: this.props.showData.ticket,\n                seenChecked: this.props.showData.seen,\n                venue: this.props.showData.venue\n            })\n        }\n        \n    }\n\n    handleAddArtistClick = () => {\n        this.setState(prevState => ({\n            artistInputs: [...prevState.artistInputs, <TextField placeholder=\"Artist/Band\" name=\"artist\" onChange={this.handleArtistChange} />]\n        }))\n    }\n\n    handleVenueChange = e => {\n        this.setState({ venue: e.target.value })\n    }\n\n    handleArtistChange = index => e => {\n        const newArtists = this.state.artists.map((artist, artistIndex) => {\n            if (index !== artistIndex) return artist;\n            const newArtistName = e.target.value\n            return artist = newArtistName\n        });\n\n        this.setState({ artists: newArtists });\n    };\n\n\n    handleDateChange = date => {\n        this.setState({ date: date })\n    }\n\n    handleCheckboxClick = name => event => {\n        this.setState({ ...this.state, [name]: event.target.checked })\n    }\n\n    handleFormSubmit = async e => {\n        e.preventDefault()\n        \n        const artistArray = []\n\n        // console.log('length', e.target.artist.length)\n\n        // if (typeof(e.target.artist.length) === 'undefined') {\n        //     artistArray.push(e.target.artist.value)\n        // } else {\n        //     const artists = Array.from(e.target.artist)\n        //     artists.forEach(artist => {\n        //         if (artist.value.length) {\n        //             artistArray.push(artist.value)\n        //         }\n        //     })\n\n        //     console.log('artistArray', artistArray)\n        // }\n        \n        const showData = {\n            // artists: artistArray,\n            date: this.state.date,\n            venue: e.target.venue.value,\n            seen: this.state.seenChecked,\n            ticket: this.state.ticketChecked\n        }\n\n        let url = ''\n        let method = ''\n\n        if (this.props.type === 'update') {\n            url = `/api/shows/update/${this.props.showData._id}`\n            method = 'PUT'\n        } else {\n            url = '/api/shows/add'\n            method = 'POST'\n        }\n\n        try {\n            const response = await fetch(url, {\n                method: method,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(showData) \n            });\n            const newShow = await response.json()\n            \n            if (this.props.type && this.props.type === 'update') {\n                this.props.toggleEditForm()\n                this.props.updateShow(newShow)\n            } else {\n                this.props.addNewShow(newShow)\n            }\n            \n        } catch(error) {\n            console.error(error)\n            throw error\n        }\n    }\n\n    deleteShow = async () => {\n        var confirmDelete = window.confirm('Delete this show?')\n        if (confirmDelete) {\n            return this.props.deleteShow(this.props.showData._id)\n        }\n        \n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleFormSubmit}>\n                {this.state.artists.map((artist, index) => (\n                    <div className=\"artist\">\n                        <input\n                            type=\"text\"\n                            placeholder={`Artist #${index + 1} name`}\n                            value={artist}\n                            onChange={this.handleArtistChange(index)}\n                        />\n                    </div>\n                ))}\n                \n                <p><Button onClick={this.handleAddArtistClick}>Add an artist</Button></p>\n                \n                <TextField \n                    value={this.state.venue}\n                    placeholder=\"Venue\"\n                    name=\"venue\"\n                    onChange={this.handleVenueChange}\n                />\n            \n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n                    <DateTimePicker \n                        value={\n                            this.props.showData \n                            ? this.props.showData.date \n                            : this.state.date\n                        } \n                        onChange={this.handleDateChange} \n                    />\n                \n                </MuiPickersUtilsProvider>\n\n                <FormControlLabel\n                    control={\n                        <Checkbox checked={this.state.ticketChecked} onChange={this.handleCheckboxClick('ticketChecked')} value=\"ticketChecked\" />\n                    }\n                    label=\"Do you have a ticket?\"\n                />\n                \n                <FormControlLabel\n                    control={\n                        <Checkbox checked={this.state.seenChecked} onChange={this.handleCheckboxClick('seenChecked')} value=\"seenChecked\" />\n                    }\n                    label=\"Did you attend this show?\"\n                />\n\n                {\n                this.props.type \n                    ? \n                        <>\n                        <Button type=\"submit\">Save show</Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className=\"delete\"\n                            onClick={this.deleteShow}\n                        >\n                            Delete\n                        </Button>\n                        </>\n                    : \n                        <Button type=\"submit\">Add show</Button>\n                }\n            </form>\n        )\n    }\n}\n\nexport default ShowForm","import React, { Component } from 'react'\n\nimport {\n    Card,\n    CardContent,\n    Typography,\n    Button,\n    TextField\n} from '@material-ui/core'\n\nimport ShowForm from './ShowForm'\n\nclass Show extends Component {\n\n    constructor(props) {\n        super(props) \n\n        this.state = {\n            showArtistInput: false,\n            showSaveButton: false,\n            toggleEditForm: false,\n            _id: null,\n            date: null,\n            venue: null,\n            artists: [],\n        }\n    }\n\n    componentDidMount() {\n        const {\n            _id,\n            date,\n            venue,\n            artists\n        } = this.props.data\n\n        this.setState({\n            _id, \n            date,\n            venue,\n            artists,\n        })\n    }\n\n    componentWillReceiveProps() {\n        const {\n            _id,\n            date,\n            venue,\n            artists\n        } = this.props.data\n\n        this.setState({\n            _id,\n            date,\n            venue,\n            artists,\n        })\n    }\n\n    toggleEditForm = () => {\n        console.log('click')\n        this.setState({\n            // showArtistInput: true,\n            // showSaveButton: true\n            toggleEditForm: !this.state.toggleEditForm,\n        })\n    }\n\n    updateShow = showData => {\n        this.props.updateShow(showData)\n    }\n\n    saveEditForm = () => {\n        console.log('save')\n    }\n    \n    render() {\n        return (\n            <Card style={{ maxWidth: 345 }}>\n                <CardContent>\n                    {this.state.toggleEditForm\n                        ? <ShowForm type=\"update\" updateShow={this.updateShow} toggleEditForm={this.toggleEditForm} handleVenueChange={this.handleVenueChange} showData={this.props.data} deleteShow={this.props.deleteShow} />\n                        :\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            <div>\n\n                                <p>Lineup</p>\n                                \n                                <ul>\n                                {this.state.artists.map(artist => {\n                                    return this.state.showArtistInput \n                                        ? <TextField placeholder={artist} name=\"artist\" />\n                                        : <li>{artist}</li>\n                                })}\n                                </ul>\n                                \n                                {this.state.venue} - {this.state.date}\n\n                            </div>\n\n                            {this.state.showSaveButton\n                                ? <Button onClick={this.saveEditForm}>Save</Button>\n                                : <Button onClick={this.toggleEditForm}>Edit Show</Button>\n                            }\n\n                        </Typography>\n                    }\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nexport default Show","import React, { Component } from 'react'\n\nimport Show from './Show'\n\nclass Shows extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>Seen Shows</h1>\n                {\n                    this.props.shows.map((show) => {\n                        {\n                            return show.seen\n                            ? <Show key={show.id} data={show} updateShow={this.props.updateShow} deleteShow={this.props.deleteShow} />\n                            : null\n                        }\n                    })\n                }\n\n                <h1>Upcoming Shows</h1>\n                {\n                    this.props.shows.map((show) => {\n                        {\n                            return !show.seen\n                                ? <Show key={show.id} data={show} updateShow={this.props.updateShow} deleteShow={this.props.deleteShow} />\n                                : null\n                        }\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Shows","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Shows from './Shows'\nimport ShowForm from './ShowForm'\n\nclass App extends Component {\n\n  // IMPORTANT\n  // Don't forget error handling or validation of inputs\n  // Handle error at route level, last middleware after all routes\n  // Services should throw errors up to router/controller\n\n  constructor() {\n    super()\n\n    this.state = {\n      shows: [],\n    }\n  }\n\n  async componentDidMount() {\n    const result = await fetch('/api/shows')\n    const data = await result.json()\n    const prevState = this.state\n    const newState = { shows: data.data }\n    const nextState = Object.assign({}, prevState, newState)\n    this.setState(nextState)\n  }\n\n  addNewShow = newShow => {\n    const prevShows = this.state.shows\n    const nextShows = [...prevShows, newShow.data[0]]\n    const prevState = this.state\n    const newState = { shows: nextShows }\n    const nextState = Object.assign({}, prevState, newState)\n    this.setState(nextState)\n  }\n\n  updateShow = showData => {\n    const prevShows = this.state.shows\n    const prevState = this.state\n    const showToUpdate = prevShows.find(show => show._id === showData.data[0]._id)\n    const updatedShows = this.state.shows.map(show => (show._id === showData.data[0]._id ? Object.assign(show, showData.data[0]) : show))\n    const newState = { shows: updatedShows }\n    const nextState = Object.assign({}, prevState, newState)\n    this.setState(nextState)\n  }\n\n  deleteShow = async id => {\n    try {\n      const response = await fetch(`/api/shows/delete/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      this.setState(prevState => ({ shows: prevState.shows.filter(show => show._id !== id) }));\n\n    } catch (error) {\n      console.error(error)\n      throw error\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1>Showtime</h1>\n        </header>\n        <p>Shows</p>\n        <Shows shows={this.state.shows} updateShow={this.updateShow} deleteShow={this.deleteShow} />\n        <p>Add a show</p>\n        <ShowForm addNewShow={this.addNewShow} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* global fetch */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}